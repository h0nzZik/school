
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000196  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000196  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000abc  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a82  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  6c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  70:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  74:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  78:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  7c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  80:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  84:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  88:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

0000008c <__c.1404>:
  8c:	48 65 6c 6c 6f 20 77 6f 72 6c 64 20 2d 20 52 4f     Hello world - RO
  9c:	4d 20 73 74 72 69 6e 67 20 2d 20 49 20 21 0d 0a     M string - I !..
	...

000000ad <hello_str.1403>:
  ad:	48 65 6c 6c 6f 20 77 6f 72 6c 64 20 2d 20 52 4f     Hello world - RO
  bd:	4d 20 73 74 72 69 6e 67 20 2d 20 49 49 20 21 0d     M string - II !.
  cd:	0a 00 00                                            ...

000000d0 <__ctors_end>:
  d0:	11 24       	eor	r1, r1
  d2:	1f be       	out	0x3f, r1	; 63
  d4:	cf ef       	ldi	r28, 0xFF	; 255
  d6:	d0 e1       	ldi	r29, 0x10	; 16
  d8:	de bf       	out	0x3e, r29	; 62
  da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
  dc:	11 e0       	ldi	r17, 0x01	; 1
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	e6 e9       	ldi	r30, 0x96	; 150
  e4:	f1 e0       	ldi	r31, 0x01	; 1
  e6:	00 e0       	ldi	r16, 0x00	; 0
  e8:	0b bf       	out	0x3b, r16	; 59
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
  ec:	07 90       	elpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	ae 31       	cpi	r26, 0x1E	; 30
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>

000000f6 <__do_clear_bss>:
  f6:	11 e0       	ldi	r17, 0x01	; 1
  f8:	ae e1       	ldi	r26, 0x1E	; 30
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	ae 31       	cpi	r26, 0x1E	; 30
 102:	b1 07       	cpc	r27, r17
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 b3 00 	call	0x166	; 0x166 <main>
 10a:	0c 94 ca 00 	jmp	0x194	; 0x194 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000112 <ser_init>:
 * \param baud  UART0 baudrate generator value.
 */
void ser_init(uint16_t baud)
{
	/* set baud rate */
	UBRR0H = (uint8_t)(baud>>8);
 112:	29 2f       	mov	r18, r25
 114:	33 27       	eor	r19, r19
 116:	20 93 90 00 	sts	0x0090, r18
	UBRR0L = (uint8_t) baud;
 11a:	89 b9       	out	0x09, r24	; 9

	/* enable receiver and transmitter */
	UCSR0B = (1<<RXEN)|(1<<TXEN);
 11c:	88 e1       	ldi	r24, 0x18	; 24
 11e:	8a b9       	out	0x0a, r24	; 10

	/* set frame format: 8 data, 2 stop bits */
	UCSR0C = (1<<USBS)|(3<<UCSZ0);
 120:	8e e0       	ldi	r24, 0x0E	; 14
 122:	80 93 95 00 	sts	0x0095, r24
 126:	08 95       	ret

00000128 <ser_puts>:
 * \brief Writes the string s to serial port (UART0).
 *
 * \param s  string to write.
 */
void ser_puts(char *s)
{
 128:	fc 01       	movw	r30, r24
	while (*s)
 12a:	80 81       	ld	r24, Z
 12c:	88 23       	and	r24, r24
 12e:	39 f0       	breq	.+14     	; 0x13e <ser_puts+0x16>
	{
		/* wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE)) );
 130:	5d 9b       	sbis	0x0b, 5	; 11
 132:	fe cf       	rjmp	.-4      	; 0x130 <ser_puts+0x8>

		/* put data into buffer and sends the data */
		UDR0 = *s++;
 134:	8c b9       	out	0x0c, r24	; 12
 136:	31 96       	adiw	r30, 0x01	; 1
 *
 * \param s  string to write.
 */
void ser_puts(char *s)
{
	while (*s)
 138:	80 81       	ld	r24, Z
 13a:	88 23       	and	r24, r24
 13c:	c9 f7       	brne	.-14     	; 0x130 <ser_puts+0x8>
 13e:	08 95       	ret

00000140 <ser_puts_P>:
 * \brief Writes the ROM string s to serial port (UART0).
 *
 * \param s  ROM placed string to write.
 */
void ser_puts_P(prog_char *s)
{
 140:	fc 01       	movw	r30, r24
	char c = (char) pgm_read_byte (s);
 142:	c8 95       	lpm
 144:	80 2d       	mov	r24, r0

	while(c)
 146:	88 23       	and	r24, r24
 148:	41 f0       	breq	.+16     	; 0x15a <ser_puts_P+0x1a>
	{
		/* wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE)) );
 14a:	5d 9b       	sbis	0x0b, 5	; 11
 14c:	fe cf       	rjmp	.-4      	; 0x14a <ser_puts_P+0xa>

		/* put data into buffer and sends the data */
		UDR0 = c;
 14e:	8c b9       	out	0x0c, r24	; 12

		/* read character from program memory */
		c = (char) pgm_read_byte (++s);
 150:	31 96       	adiw	r30, 0x01	; 1
 152:	c8 95       	lpm
 154:	80 2d       	mov	r24, r0
 */
void ser_puts_P(prog_char *s)
{
	char c = (char) pgm_read_byte (s);

	while(c)
 156:	88 23       	and	r24, r24
 158:	c1 f7       	brne	.-16     	; 0x14a <ser_puts_P+0xa>
 15a:	08 95       	ret

0000015c <ser_getch>:
 * \return received character.
 */
uint8_t ser_getch(void)
{
	/* wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
 15c:	5f 9b       	sbis	0x0b, 7	; 11
 15e:	fe cf       	rjmp	.-4      	; 0x15c <ser_getch>

	/* get and return received data from buffer */
	return UDR0;
 160:	8c b1       	in	r24, 0x0c	; 12
}
 162:	99 27       	eor	r25, r25
 164:	08 95       	ret

00000166 <main>:
int main( void )
{
	static prog_char hello_str[] = "Hello world - ROM string - II !\r\n";

					/* open UART0 - 9600,N,8,1 */
	ser_init( UART_BAUD_SELECT(9600, F_CPU) );
 166:	8f e5       	ldi	r24, 0x5F	; 95
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 89 00 	call	0x112	; 0x112 <ser_init>

	while(1)
	{
		ser_puts("Hello world - RAM string !\r\n");
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 94 00 	call	0x128	; 0x128 <ser_puts>
		ser_getch();		/* press any key */
 176:	0e 94 ae 00 	call	0x15c	; 0x15c <ser_getch>

		ser_puts_P(PSTR("Hello world - ROM string - I !\r\n"));
 17a:	8c e8       	ldi	r24, 0x8C	; 140
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 a0 00 	call	0x140	; 0x140 <ser_puts_P>
		ser_getch();		/* press any key */
 182:	0e 94 ae 00 	call	0x15c	; 0x15c <ser_getch>

		ser_puts_P(hello_str);
 186:	8d ea       	ldi	r24, 0xAD	; 173
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 a0 00 	call	0x140	; 0x140 <ser_puts_P>
		ser_getch();		/* press any key */
 18e:	0e 94 ae 00 	call	0x15c	; 0x15c <ser_getch>
 192:	ed cf       	rjmp	.-38     	; 0x16e <main+0x8>

00000194 <_exit>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <_exit>
